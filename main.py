#Задача: Разработать простую игру, где игрок может использовать различные типы оружия для борьбы с монстрами.
# Программа должна быть спроектирована таким образом, чтобы легко можно было добавлять новые типы оружия,
# не изменяя существующий код бойцов или механизм боя.
# Исходные данные:
# - Есть класс `Fighter`, представляющий бойца.
# - Есть класс `Monster`, представляющий монстра.
# - Игрок управляет бойцом и может выбирать для него одно из вооружений для боя.
# Шаг 1:Создайте абстрактный класс для оружия
# - Создайте абстрактный класс `Weapon`, который будет содержать абстрактный метод `attack()`.
# Шаг 2: Реализуйте конкретные типы оружия
# - Создайте несколько классов, унаследованных от `Weapon`, например, `Sword` и `Bow`.
# Каждый из этих классов реализует метод `attack()` своим уникальным способом.
# Шаг 3: Модифицируйте класс `Fighter`
# - Добавьте в класс `Fighter` поле, которое будет хранить объект класса `Weapon`.
# - Добавьте метод `change_weapon()`, который позволяет изменить оружие бойца.
# Шаг 4: Реализация боя
# - Реализуйте простой механизм для демонстрации боя между бойцом и монстром, исходя из выбранного оружия.
# Требования к заданию:
# - Код должен быть написан на Python.
# - Программа должна демонстрировать применение принципа открытости/закрытости: новые типы оружия можно легко добавлять,
# не изменяя существующие классы бойцов и механизм боя.
# - Программа должна выводить результат боя в консоль.
# Пример результата:
# Боец выбирает меч.
# Боец наносит удар мечом.
# Монстр побежден!
# Боец выбирает лук.
# Боец наносит удар из лука.
# Монстр побежден!



from abc import ABC, abstractmethod

class Fighter():
    def __init__(self, weapon, health):
        self.weapon = Weapon()
        self.health = health

    def change_weapon(self):
        if self.weapon is Sword():
            self.weapon = Bow()
            print("Боец выбирает лук.")
        elif self.weapon is Bow():
            self.weapon = Sword()
            print("Боец выбирает меч.")

    def attack(self):
        self.weapon.attack()


class Monster():
    def __init__(self, claw_power, health_monster):
        self.claw_power = claw_power
        self.health_monster = health_monster


class Weapon(ABC):
    @abstractmethod
    def attack(self):
        pass


class Sword(Weapon):
    def attack(self):
        print("Атака мечом")
        #print(f'Здоровье монстра: {self.health_monster} -> Осталось: {self.health_monster - self.weapon}')

class Bow(Weapon):
    def attack(self):
        print("Стрельба из лука")

class Axe(Weapon):
    def attack(self):
        print("Удар топором")


knight = Fighter(Sword(), 100)
knight.change_weapon()